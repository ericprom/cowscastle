{"version":3,"sources":["meteor://ðŸ’»app/packages/arunoda_npm/packages/arunoda_npm.js"],"names":[],"mappingskH","file":"/packages/arunoda_npm.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/arunoda:npm/index.js                                                                      //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nvar Future = Npm.require('fibers/future');                                                            // 1\nAsync = {};                                                                                           // 2\n                                                                                                      // 3\nMeteor.require = function(moduleName) {                                                               // 4\n  var module = Npm.require(moduleName);                                                               // 5\n  return module;                                                                                      // 6\n};                                                                                                    // 7\n                                                                                                      // 8\nAsync.runSync = Meteor.sync = function(asynFunction) {                                                // 9\n  var future = new Future();                                                                          // 10\n  var sent = false;                                                                                   // 11\n  var payload;                                                                                        // 12\n                                                                                                      // 13\n  var wrappedAsyncFunction = Meteor.bindEnvironment(asynFunction, function(err) {                     // 14\n    console.error('Error inside the Async.runSync: ' + err.message);                                  // 15\n    returnFuture(err);                                                                                // 16\n  });                                                                                                 // 17\n                                                                                                      // 18\n  setTimeout(function() {                                                                             // 19\n    wrappedAsyncFunction(returnFuture);                                                               // 20\n  }, 0);                                                                                              // 21\n                                                                                                      // 22\n  future.wait();                                                                                      // 23\n  sent = true;                                                                                        // 24\n                                                                                                      // 25\n  function returnFuture(error, result) {                                                              // 26\n    if(!sent) {                                                                                       // 27\n      payload = { result: result, error: error};                                                      // 28\n      future.return();                                                                                // 29\n    }                                                                                                 // 30\n  }                                                                                                   // 31\n                                                                                                      // 32\n  return payload;                                                                                     // 33\n};                                                                                                    // 34\n                                                                                                      // 35\nAsync.wrap = function(arg1, arg2) {                                                                   // 36\n  if(typeof arg1 == 'function') {                                                                     // 37\n    var func = arg1;                                                                                  // 38\n    return wrapFunction(func);                                                                        // 39\n  } else if(typeof arg1 == 'object' && typeof arg2 == 'string') {                                     // 40\n    var obj = arg1;                                                                                   // 41\n    var funcName = arg2;                                                                              // 42\n    return wrapObject(obj, [funcName])[funcName];                                                     // 43\n  } else if(typeof arg1 == 'object' &&  arg2 instanceof Array) {                                      // 44\n    var obj = arg1;                                                                                   // 45\n    var funcNameList = arg2;                                                                          // 46\n    return wrapObject(obj, funcNameList);                                                             // 47\n  } else {                                                                                            // 48\n    throw new Error('unsupported argument list');                                                     // 49\n  }                                                                                                   // 50\n                                                                                                      // 51\n  function wrapObject(obj, funcNameList) {                                                            // 52\n    var returnObj = {};                                                                               // 53\n    funcNameList.forEach(function(funcName) {                                                         // 54\n      if(obj[funcName]) {                                                                             // 55\n        var func = obj[funcName].bind(obj);                                                           // 56\n        returnObj[funcName] = wrapFunction(func);                                                     // 57\n      } else {                                                                                        // 58\n        throw new Error('instance method not exists: ' + funcName);                                   // 59\n      }                                                                                               // 60\n    });                                                                                               // 61\n    return returnObj;                                                                                 // 62\n  }                                                                                                   // 63\n                                                                                                      // 64\n  function wrapFunction(func) {                                                                       // 65\n    return function() {                                                                               // 66\n      var args = arguments;                                                                           // 67\n      response = Meteor.sync(function(done) {                                                         // 68\n        Array.prototype.push.call(args, done);                                                        // 69\n        func.apply(null, args);                                                                       // 70\n      });                                                                                             // 71\n                                                                                                      // 72\n      if(response.error) {                                                                            // 73\n        //we need to wrap a new error here something throw error object comes with response does not  // 74\n        //print the correct error to the console, if there is not try catch block                     // 75\n        var error = new Error(response.error.message);                                                // 76\n        for(var key in response.error) {                                                              // 77\n          if(error[key] === undefined) {                                                              // 78\n            error[key] = response.error[key];                                                         // 79\n          }                                                                                           // 80\n        }                                                                                             // 81\n        throw error;                                                                                  // 82\n      } else {                                                                                        // 83\n        return response.result;                                                                       // 84\n      }                                                                                               // 85\n    };                                                                                                // 86\n  }                                                                                                   // 87\n};                                                                                                    // 88\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}