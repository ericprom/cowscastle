{"version":3,"sources":["meteor://ðŸ’»app/packages/splendido_accounts-emails-field/packages/splendido_accounts-emails-field.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6F","file":"/packages/splendido_accounts-emails-field.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/splendido:accounts-emails-field/lib/_globals.js                     //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n                                                                                // 1\n// Declare global object                                                        // 2\nAccountsEmailsField = undefined;                                                // 3\n                                                                                // 4\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/splendido:accounts-emails-field/lib/accounts-emails-field.js        //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n/* global AccountsEmailsField: true */                                          // 1\n'use strict';                                                                   // 2\n                                                                                // 3\n                                                                                // 4\n// List of services that do not permit the use of the account to login into     // 5\n// another website unless the registered email was verified.                    // 6\n// Hence, for the services listed here, we can considered the email address as  // 7\n// verified even if not specific field stating the verification status is       // 8\n// provided!                                                                    // 9\n                                                                                // 10\nvar whitelistedServices = ['facebook', 'linkedin'];                             // 11\n                                                                                // 12\n// Facebook                                                                     // 13\n// It doesn't permit the use of the account unless the email                    // 14\n// ownership is confirmed!                                                      // 15\n// tested and verified on 2014/06/08                                            // 16\n// (see issue #29 at                                                            // 17\n// https://github.com/splendido/meteor-accounts-emails-field/issues/29)         // 18\n                                                                                // 19\n// GitHub                                                                       // 20\n// If you register WITHOUT verifying the email you get                          // 21\n// \"email\": null                                                                // 22\n// on login, if then set the NON-verified email address as public you get it on // 23\n// login!                                                                       // 24\n// So, GitHub provided email address cannot be considered as verified!!!        // 25\n// tested and verified on 2014/06/08                                            // 26\n                                                                                // 27\n// Linkedin                                                                     // 28\n// It doesn't permit to activate your account unless the email                  // 29\n// ownership is confirmed! even if, if you come back later you can access it... // 30\n// In any case 3r-party login is not permitted!!                                // 31\n// tested and verified on 2014/06/08                                            // 32\n// (see issue #1 at                                                             // 33\n// https://github.com/splendido/meteor-accounts-emails-field/issues/1 )         // 34\n                                                                                // 35\n// Twitter                                                                      // 36\n// You never get an email field!!!                                              // 37\n// The access is granted even without verifying the provided email address!     // 38\n                                                                                // 39\n                                                                                // 40\nvar getEmailsFromService = function(serviceName, service) {                     // 41\n\t// Picks up the email address from the service                                 // 42\n\t// NOTE: different services use different names for the email filed!!!         // 43\n\t//       so far, `email` and `emailAddress` were found but it may be the       // 44\n\t//       new names should be added to support all 3rd-party packages!          // 45\n\t// Addition by @neopostmodern: Meteor developer accounts support multiple      // 46\n\t//      emails themselves, rewrote to look for `emails` too and everything     // 47\n\t//      must be array based then.                                              // 48\n                                                                                // 49\n\tvar emails = [];                                                               // 50\n                                                                                // 51\n\tif (service.email) {                                                           // 52\n\t\temails = [{                                                                   // 53\n\t\t\taddress: service.email                                                       // 54\n\t\t}];                                                                           // 55\n\t}                                                                              // 56\n\tif (service.emailAddress) {                                                    // 57\n\t\temails = [{                                                                   // 58\n\t\t\taddress: service.emailAddress                                                // 59\n\t\t}];                                                                           // 60\n\t}                                                                              // 61\n\tif (service.emails) {                                                          // 62\n\t\temails = service.emails;                                                      // 63\n\t}                                                                              // 64\n                                                                                // 65\n\treturn emails.map(function(email) {                                            // 66\n\t\tif (!email.address) {                                                         // 67\n\t\t\t// e.g. GitHub provides a null value in the field \"email\" in case the        // 68\n\t\t\t// email address is not verified!                                            // 69\n\t\t\treturn {                                                                     // 70\n\t\t\t\taddress: null,                                                              // 71\n\t\t\t\tverified: false                                                             // 72\n\t\t\t};                                                                           // 73\n\t\t}                                                                             // 74\n                                                                                // 75\n\t\tvar verified = false;                                                         // 76\n\t\t// Tries to determine whether the 3rd-party email was verified                // 77\n\t\t// NOTE: so far only for the service `google` it was found a field            // 78\n\t\t//       called `verified_email`. But it may be that new names                // 79\n\t\t//       should be atted to better support all 3rd-party packages!            // 80\n\t\tif (_.indexOf(whitelistedServices, serviceName) > -1) {                       // 81\n\t\t\tverified = true;                                                             // 82\n\t\t}                                                                             // 83\n\t\telse if (email.verified) {                                                    // 84\n\t\t\t// e.g. Meteor developer account                                             // 85\n\t\t\tverified = true;                                                             // 86\n\t\t}                                                                             // 87\n\t\telse if (service.verified_email) {                                            // 88\n\t\t\tverified = true;                                                             // 89\n\t\t}                                                                             // 90\n                                                                                // 91\n\t\treturn {                                                                      // 92\n\t\t\taddress: email.address,                                                      // 93\n\t\t\tverified: verified                                                           // 94\n\t\t};                                                                            // 95\n                                                                                // 96\n\t});                                                                            // 97\n};                                                                              // 98\n                                                                                // 99\n                                                                                // 100\nvar updateEmails = function(info) {                                             // 101\n\t// Picks up the user object                                                    // 102\n\tvar user = info.user;                                                          // 103\n\t// creates an object with addresses as keys and verification status as values  // 104\n\tvar emails = {};                                                               // 105\n                                                                                // 106\n\t// Picks up all email addresses inside 'emails' field                          // 107\n\t_.each(user.emails || [], function(email) {                                    // 108\n\t\temails[email.address] = emails[email.address] || email.verified;              // 109\n\t});                                                                            // 110\n                                                                                // 111\n\t// Updates or adds all emails found inside services                            // 112\n\t_.each(user.services, function(service, serviceName) {                         // 113\n\t\tif (serviceName === 'resume' ||                                               // 114\n\t\t    serviceName === 'email'  ||                                               // 115\n\t\t\t\tserviceName === 'password')                                                 // 116\n\t\t{                                                                             // 117\n\t\t\treturn;                                                                      // 118\n\t\t}                                                                             // 119\n\t\tvar serviceEmails = getEmailsFromService(serviceName, service);               // 120\n                                                                                // 121\n\t\tserviceEmails.forEach(function(serviceEmail) {                                // 122\n\t\t\tif (serviceEmail.address) {                                                  // 123\n\t\t\t\temails[serviceEmail.address] = emails[serviceEmail.address] ||              // 124\n\t\t\t\t                               serviceEmail.verified;                       // 125\n\t\t\t}                                                                            // 126\n\t\t});                                                                           // 127\n\t});                                                                            // 128\n                                                                                // 129\n\t// transforms emails back to                                                   // 130\n\t// [{address: addr1, verified: bool}, {address: addr2, verified: bool}, ...]   // 131\n\tvar registeredEmails = _.map(emails, function(verified, address) {             // 132\n\t\treturn {                                                                      // 133\n\t\t\taddress: address,                                                            // 134\n\t\t\tverified: verified                                                           // 135\n\t\t};                                                                            // 136\n\t});                                                                            // 137\n                                                                                // 138\n\t// In case we have at least 1 email                                            // 139\n\tif (registeredEmails.length) {                                                 // 140\n\t\t// Updates the registeredEmails field                                         // 141\n\t\tMeteor.users.update({                                                         // 142\n\t\t\t_id: user._id                                                                // 143\n\t\t}, {                                                                          // 144\n\t\t\t$set: {                                                                      // 145\n\t\t\t\tregistered_emails: registeredEmails                                         // 146\n\t\t\t}                                                                            // 147\n\t\t});                                                                           // 148\n\t\t// Updates also current user object to be possibly used later                 // 149\n\t\t// after the function returns...                                              // 150\n\t\tuser.registered_emails = registeredEmails;                                    // 151\n\t} else {                                                                       // 152\n\t\t// Removes the registered_emails field                                        // 153\n\t\tMeteor.users.update({                                                         // 154\n\t\t\t_id: user._id                                                                // 155\n\t\t}, {                                                                          // 156\n\t\t\t$unset: {                                                                    // 157\n\t\t\t\tregistered_emails: \"\"                                                       // 158\n\t\t\t}                                                                            // 159\n\t\t});                                                                           // 160\n\t\t// Updates also current user object to be possibly used later                 // 161\n\t\t// after the function returns...                                              // 162\n\t\tdelete user.registered_emails;                                                // 163\n\t}                                                                              // 164\n};                                                                              // 165\n                                                                                // 166\n                                                                                // 167\n// Function to update the 'registered_emails' field for all users at once       // 168\nvar updateAllUsersEmails = function() {                                         // 169\n\tMeteor.users.find().forEach(function(user) {                                   // 170\n\t\tupdateEmails({                                                                // 171\n\t\t\tuser: user                                                                   // 172\n\t\t});                                                                           // 173\n\t});                                                                            // 174\n};                                                                              // 175\n                                                                                // 176\n                                                                                // 177\n// Create the object to be exported                                             // 178\nAccountsEmailsField = {                                                         // 179\n\tgetEmailsFromService: getEmailsFromService,                                    // 180\n\tupdateAllUsersEmails: updateAllUsersEmails,                                    // 181\n\tupdateEmails: updateEmails,                                                    // 182\n};                                                                              // 183\n                                                                                // 184\n                                                                                // 185\n// Set up an index on registered_emails                                         // 186\nMeteor.users._ensureIndex('registered_emails.address');                         // 187\n                                                                                // 188\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/splendido:accounts-emails-field/lib/accounts-emails-field-on-login. //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n/* global AccountsEmailsField: false */                                         // 1\n'use strict';                                                                   // 2\n                                                                                // 3\n                                                                                // 4\n// Register `updateEmails` function under the `onLogin` hook so to              // 5\n// check/update the `emails` field at every new login!                          // 6\nAccounts.onLogin(AccountsEmailsField.updateEmails);                             // 7\n                                                                                // 8\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}